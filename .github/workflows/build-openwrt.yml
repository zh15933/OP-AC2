#
#
# 因为SSH连接配置固件直接编译，会给github停止编译的,所以要另外触发启动编译程序
#
# 如果不能触发compile启动,那您就设置好compile.yml文件，下载好.config配置文件覆盖到对应源码，再用compile.yml启动
#
# 一般情况下都能触发启动编译的，除非没设置好密匙，或者密匙过期了，或者密匙错误之类的
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#

name: 触发compile启动编译
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh-actions改成ssh,再按Run workflow启动,则开启SSH连接配置固件'
        required: false
        default: 'ssh-actions'


# 定时触发开始编译(把下面两个#去掉开启,时间设置请看定时编译说明)
#  schedule:
#   - cron: 0 16 */7 * *


env: 
 REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
 TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 启动${{matrix.target}}编译
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_source]

        # [Lede_source,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

    steps:
    - name: 准备结束
      uses: actions/checkout@v2

    - name: 读取脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV

    - name: 读取扩展文件
      run: |
        echo
        git clone --depth 1 -b main https://github.com/281677160/common build/common > /dev/null 2>&1
        chmod -R +x "${GITHUB_WORKSPACE}/build/common"
        if [[ "${Modelfile}" == "openwrt_amlogic" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=amlogic" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "master" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lede" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          echo "ZZZ=package/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lienol" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Tianling" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Mortal" >> $GITHUB_ENV
        fi
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "DELETE=package/base-files/files/etc/deletefile" >> $GITHUB_ENV
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y subversion build-essential libncurses5-dev openssl libssl-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 下载"${{matrix.target}}"源码
      working-directory: /workdir
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt > /dev/null 2>&1
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd $GITHUB_WORKSPACE/openwrt
        ./scripts/feeds update -a > /dev/null 2>&1
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
 
    - name: 加载源,补丁和自定义设置
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        mv -f "${Home}"/build/common/*.sh "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        cd openwrt
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          source "${PATH1}/common.sh" && Diy_Tianling
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          source "${PATH1}/common.sh" && Diy_mortal
        fi
        source "${PATH1}/common.sh" && Diy_all > /dev/null 2>&1
        /bin/bash "${PATH1}/$DIY_PART_SH"
        ./scripts/feeds update -a > /dev/null 2>&1
        ./scripts/feeds install -a > /dev/null 2>&1
        [[ -e "$PATH1/$CONFIG_FILE" ]] && mv "$PATH1/$CONFIG_FILE" .config
        
    - name: SSH远程连接（制作.config配置文件）
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh')
      uses: danshui-git/debugger-action@master
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成"${{matrix.target}}"配置文件
      id: compile
      run: |
        cd openwrt
        make defconfig
        ./scripts/diffconfig.sh > ${GITHUB_WORKSPACE}/${CONFIG_FILE}
        cp -Rf ${GITHUB_WORKSPACE}/${CONFIG_FILE} ${GITHUB_WORKSPACE}/config.txt
        echo "::set-output name=status::success"
        echo "TARGET_BOARD=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
        if [ `grep -c "CONFIG_TARGET_x86_64=y" .config` -eq '1' ]; then
         echo "TARGET_PROFILE=x86-64" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET_x86_generic=y" .config` -eq '1' ]; then
         echo "TARGET_PROFILE=x86-32" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET.*DEVICE.*=y" .config` -eq '1' ]; then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "TARGET_PROFILE=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "TARGET_PROFILE=armvirt" >> $GITHUB_ENV
        fi
        
    - name: 上传.config配置文件在 github actions
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: .config_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: config.txt
        
    - name: 触发compile.yml启动"${{matrix.target}}"编译
      if: steps.compile.outputs.status == 'success' && env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        rm -fr .github
        curl -fsSL https://raw.githubusercontent.com/281677160/build-actions/main/.github/workflows/build-openwrt.yml > sybuild-openwrt.yml
        git clone -b main https://github.com/${{github.repository}}.git repo
        if [[ `ls -a $GITHUB_WORKSPACE/repo/.github/workflows | grep -c "build-openwrt.yml"` == '0' ]]; then
          curl -fsSL https://raw.githubusercontent.com/281677160/build-actions/main/.github/workflows/build-openwrt.yml > $GITHUB_WORKSPACE/repo/.github/workflows/build-openwrt.yml
        fi
        if [[ `ls -a $GITHUB_WORKSPACE/repo/.github/workflows | grep -c "compile.yml"` == '0' ]]; then
          curl -fsSL https://raw.githubusercontent.com/281677160/build-actions/main/.github/workflows/compile.yml > $GITHUB_WORKSPACE/repo/.github/workflows/compile.yml
        fi
        if [[ `ls -a $GITHUB_WORKSPACE/repo/.github/workflows | grep -c "synchronization.yml"` == '0' ]]; then
          curl -fsSL https://raw.githubusercontent.com/281677160/build-actions/main/.github/workflows/synchronization.yml > $GITHUB_WORKSPACE/repo/.github/workflows/synchronization.yml
        fi
        export Sched="$(grep -A 1 'schedule:' repo/.github/workflows/build-openwrt.yml |awk 'NR==2')" && echo "${Sched}" > Schedu
        if [[ `grep -c "\#" Schedu` == '0' ]]; then
          export CRON2="$(grep -A 1 'schedule:' repo/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')"
          export CRON1="$(grep -A 1 'schedule:' sybuild-openwrt.yml |awk 'NR==2' |sed 's/.//' |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')"
          sed -i 's/^#\(.*schedule:\)/\1/' sybuild-openwrt.yml
          sed -i 's/^#\(.*cron:\)/\1/' sybuild-openwrt.yml
          sed -i "s/${CRON1}/${CRON2}/g" sybuild-openwrt.yml
        else
          export CRON2="$(grep -A 1 'schedule:' repo/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/.//' |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')"
          export CRON1="$(grep -A 1 'schedule:' sybuild-openwrt.yml |awk 'NR==2' |sed 's/.//' |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')"
          sed -i "s/${CRON1}/${CRON2}/g" sybuild-openwrt.yml
        fi
        export TARGET1="$(grep "target: \[" sybuild-openwrt.yml |grep  -v \#  |awk 'NR==1'|sed 's/^[ ]*//g' |sed 's/\[/\\&/' |sed 's/\]/\\&/')"
        export TARGET2="$(grep "target: \[" repo/.github/workflows/build-openwrt.yml |grep  -v \#  |awk 'NR==1'|sed 's/^[ ]*//g' |sed 's/\[/\\&/' |sed 's/\]/\\&/')"
        sed -i "s/${TARGET1}/${TARGET2}/g" sybuild-openwrt.yml
        cd repo
        git rm build/${{matrix.target}}/${CONFIG_FILE}
        git rm .github/workflows/build-openwrt.yml
        git rm .github/workflows/compile.yml
        cp -Rf $GITHUB_WORKSPACE/${CONFIG_FILE} build/${{matrix.target}}/${CONFIG_FILE}
        cp -Rf $GITHUB_WORKSPACE/sybuild-openwrt.yml .github/workflows/build-openwrt.yml
        curl -fsSL https://raw.githubusercontent.com/281677160/build-actions/main/.github/workflows/compile.yml > .github/workflows/compile.yml
        export QIDONG_paths="$(grep -A 1 'paths:' .github/workflows/compile.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')"
        export TARGE="$(grep "target: \[" .github/workflows/compile.yml |grep  -v \#  |awk 'NR==1'|sed 's/^[ ]*//g' |sed 's/\[/\\&/' |sed 's/\]/\\&/')"
        export TARGE2="target: \\[${{matrix.target}}\\]"
        sed -i "s/${TARGE}/${TARGE2}/g" .github/workflows/compile.yml
        sed -i "s/${QIDONG_paths}/- 'build\/${{matrix.target}}\/start-up\/start'/g" .github/workflows/compile.yml
        mkdir -p build/${{matrix.target}}/start-up
        echo "${{env.CODE}}于$(date +%Y年%m月%d号-%H点%M分)自动触发编译${{env.TARGET_PROFILE}}固件" > build/${Modelfile}/start-up/start
        git add .
        git commit -m "编译${{env.CODE}}-${{env.TARGET_PROFILE}}固件"
        git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
